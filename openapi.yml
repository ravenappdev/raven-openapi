openapi: 3.0.1
info:
  title: Raven API
  version: ''
paths:
  /v1/apps/{app_id}/events/send:
    post:
      description: This endpoint allows you to send messages
      operationId: Service.send
      tags:
        - ''
      parameters:
        - name: app_id
          in: path
          description: The `id` of the app
          required: true
          schema:
            $ref: '#/components/schemas/AppId'
          examples:
            Example1:
              value: my_app_id
            Example2:
              value: my_app_id
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEventResponse'
              examples:
                Example1:
                  value:
                    id: 1d1ed73c-96e6-4aa3-abc2-2e9a926f773a
                    success: true
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventNotFoundErrorBody'
              examples:
                Example1:
                  value:
                    success: false
                    error: event not found
      security: &ref_0
        - AuthKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  description: The name of the event
                  example: sample_event_1
                data:
                  type: object
                  additionalProperties: {}
                user:
                  $ref: '#/components/schemas/User'
                scheduleAt:
                  type: integer
                  format: int64
                  description: |
                    Time to send message expressed as UTC milliseconds. 
                    If not present, message will be sent immediately.
                override:
                  $ref: '#/components/schemas/EventOverride'
              required:
                - event
                - data
            examples:
              Example1:
                value:
                  event: sample_event_1
                  data:
                    name: name
                    date: 01 December 2022
                  user:
                    mobile: '+919876543210'
                    email: x@ravenapp.dev
                    whatsapp_mobile: '+919876543210'
              Example2:
                value:
                  event: sample_event_1
                  data:
                    name: name
                    date: 01 December 2022
                  user:
                    mobile: '+919876543210'
                    email: x@ravenapp.dev
                    whatsapp_mobile: '+919876543210'
  /v1/apps/{app_id}/events/bulk_send:
    post:
      operationId: Service.sendBulk
      tags:
        - ''
      parameters:
        - name: app_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppId'
          examples:
            Example1:
              value: my-app-id
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEventResponse'
              examples:
                Example1:
                  value:
                    id: 1d1ed73c-96e6-4aa3-abc2-2e9a926f773a
                    success: true
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  example: sample_event_1
                batch:
                  type: array
                  items:
                    $ref: '#/components/schemas/BatchEvent'
                  description: List of events
              required:
                - event
                - batch
            examples:
              Example1:
                value:
                  event: sample_event_1
                  batch:
                    - user:
                        mobile: '+919876543210'
                        email: x@ravenapp.dev
                        whatsapp_mobile: '+919876543210'
                      data:
                        name: John Doe
                        date: 01 December 2022
                    - user:
                        mobile: '+919876543210'
                        email: x@ravenapp.dev
                        whatsapp_mobile: '+919876543210'
                      data:
                        name: John Doe
                        date: 01 December 2022
  /v1/apps/{app_id}/users/{user_id}/devices:
    post:
      description: >
        Add Device for a User. 

        If a device_sid is specified, then devices will be merged if one is
        found.

        If no device_sid is specified, then a new device will be created.
      operationId: DeviceService.add
      tags:
        - Device
      parameters:
        - name: app_id
          in: path
          description: your app identifier
          required: true
          schema:
            $ref: '#/components/schemas/AppId'
          examples:
            Example1:
              value: my-app-id
        - name: user_id
          in: path
          description: your user identifier
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
          examples:
            Example1:
              value: my-user-id
      responses:
        '200':
          description: Returns the updated Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
              examples:
                Example1:
                  value:
                    id: my-device-id
                    platform: android
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
            examples:
              Example1:
                value:
                  fcm_token: >-
                    qweKu7bdTZumJpzxUqqpxe:APA91bE9FSScPK_kENPpBAj0URYDo4z0tE6aOrBtpgaA1I1OC7GBes1lR71EWRhavLGMzDMKPPLkUoqtvPHzCgq
                  platform: android
  /v1/apps/{app_id}/users/{user_id}/devices/{device_id}:
    put:
      description: Update a Device for a User.
      operationId: DeviceService.update
      tags:
        - Device
      parameters:
        - name: app_id
          in: path
          description: your app identifier
          required: true
          schema:
            $ref: '#/components/schemas/AppId'
          examples:
            Example1:
              value: my-app-id
        - name: user_id
          in: path
          description: your user identifier
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
          examples:
            Example1:
              value: my-user-id
        - name: device_id
          in: path
          description: your device identifier; the same as device_sid
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
          examples:
            Example1:
              value: my-device-id
      responses:
        '200':
          description: Returns the updated Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
              examples:
                Example1:
                  value:
                    id: my-device-id
                    platform: android
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
            examples:
              Example1:
                value:
                  fcm_token: >-
                    qweKu7bdTZumJpzxUqqpxe:APA91bE9FSScPK_kENPpBAj0URYDo4z0tE6aOrBtpgaA1I1OC7GBes1lR71EWRhavLGMzDMKPPLkUoqtvPHzCgq
                  platform: android
    delete:
      description: Delete a Device for a User
      operationId: DeviceService.delete
      tags:
        - Device
      parameters:
        - name: app_id
          in: path
          description: your app identifier
          required: true
          schema:
            $ref: '#/components/schemas/AppId'
        - name: user_id
          in: path
          description: your user identifier
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
        - name: device_id
          in: path
          description: your device identifier
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      responses:
        '204':
          description: ''
      security: *ref_0
    get:
      description: Get a Device for a User
      operationId: DeviceService.getDevice
      tags:
        - Device
      parameters:
        - name: app_id
          in: path
          description: your app identifier
          required: true
          schema:
            $ref: '#/components/schemas/AppId'
        - name: user_id
          in: path
          description: your user identifier
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
        - name: device_id
          in: path
          description: your device identifier
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
      security: *ref_0
  /v1/apps/{app_id}/users:
    post:
      description: Creates an AppUser if doesn't exist already, or updates user properties
      operationId: UserService.createOrUpdate
      tags:
        - User
      parameters:
        - name: app_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppId'
          examples:
            Example1:
              value: my-app-id
      responses:
        '200':
          description: Returns updated or newly created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RavenUser'
              examples:
                Example1:
                  value:
                    user_id: test-user
                    slack:
                      access_token: my-access-token
                      email: x@ravenapp.dev
                      channel_id: channel-123
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: '#/components/schemas/UserId'
                  description: |
                    Your user identifier. 
                      if user_id already exists, user properties will be updated else a new user will be created
                mobile:
                  type: string
                email:
                  type: string
                whats_app:
                  type: string
                  description: >-
                    include this only when user's whatsapp mobile is different
                    than primary mobile
              required:
                - user_id
            examples:
              Example1:
                value:
                  user_id: test-user
                  mobile: '9876543210'
                  email: x@ravenapp.dev
  /v1/apps/{app_id}/users/{user_id}:
    get:
      description: Gets the requested user
      operationId: UserService.get
      tags:
        - User
      parameters:
        - name: app_id
          in: path
          description: your app identifier
          required: true
          schema:
            $ref: '#/components/schemas/AppId'
          examples:
            Example1:
              value: my-app-id
        - name: user_id
          in: path
          description: your user identifier
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
          examples:
            Example1:
              value: my-user-id
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RavenUser'
              examples:
                Example1:
                  value:
                    user_id: my-user-id
                    slack:
                      access_token: my-access-token
                      email: x@ravenapp.dev
                      channel_id: channel-123
      security: *ref_0
components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/UserId'
          description: >
            userId to send the notifications to. 

            This is  your own user identifier which you have used to [create
            user on Raven](https://docs.raven.dev/api-reference/create-user)
        email:
          type: string
        mobile:
          type: string
          description: mobile with country code prefix (e.g +91)
        whatsapp_mobile:
          type: string
          description: |
            mobile with country code prefix (e.g. +91).
            if empty, `mobile` is considered for whatsapp
        onesignal_external_id:
          type: string
          description: >
            [OneSignal external user
            IDs](https://documentation.onesignal.com/docs/external-user-ids)
        onesignal_player_ids:
          type: array
          items:
            type: string
        fcm_tokens:
          type: array
          items:
            type: string
          description: List of fcm tokens.  eg. ["<fcmtoken1", "<fcmtoken2>"]
        ios_tokens:
          type: array
          items:
            type: string
        slack:
          $ref: '#/components/schemas/SlackProfile'
        telegram:
          $ref: '#/components/schemas/TelegramProfile'
        fcm_topic:
          type: string
        fcm_device_group:
          type: string
    EventOverride:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/EmailOverride'
        sms:
          $ref: '#/components/schemas/SmsOverride'
        whatsapp:
          $ref: '#/components/schemas/WhatsappOverride'
        push:
          $ref: '#/components/schemas/PushOverride'
        webhook:
          $ref: '#/components/schemas/WebhookOverride'
        voice:
          $ref: '#/components/schemas/VoiceOverride'
        slack:
          $ref: '#/components/schemas/SlackOverride'
        in_app:
          $ref: '#/components/schemas/InAppOverride'
        telegram:
          $ref: '#/components/schemas/TelegramOverride'
        providers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ProviderOverride'
      required:
        - providers
    ChannelOverride:
      type: object
      properties:
        schedule_at:
          type: integer
          format: int64
      required:
        - schedule_at
    EmailRecipient:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
      required:
        - name
        - address
    Attachment:
      type: object
      properties:
        file_name:
          type: string
        content:
          type: string
        url:
          type: string
      required:
        - file_name
        - content
        - url
    EmailMessage:
      type: object
      properties:
        text:
          type: string
        html_body:
          type: string
        subject:
          type: string
      required:
        - text
        - html_body
        - subject
    EmailOverride:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/EmailRecipient'
        cc:
          type: array
          items:
            $ref: '#/components/schemas/EmailRecipient'
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/EmailRecipient'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        message:
          $ref: '#/components/schemas/EmailMessage'
      required:
        - from
        - cc
        - bcc
        - attachments
        - message
      allOf:
        - $ref: '#/components/schemas/ChannelOverride'
    SmsMessage:
      type: object
      properties:
        text:
          type: string
      required:
        - text
    SmsOverride:
      type: object
      properties:
        sender:
          type: string
        message:
          $ref: '#/components/schemas/SmsMessage'
      required:
        - sender
        - message
      allOf:
        - $ref: '#/components/schemas/ChannelOverride'
    WhatsappOverride:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/SmsMessage'
      required:
        - message
      allOf:
        - $ref: '#/components/schemas/ChannelOverride'
    PushOverride:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/ChannelOverride'
    WebhookOverride:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/ChannelOverride'
    VoiceOverride:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/ChannelOverride'
    SlackMessage:
      type: object
      properties:
        text:
          type: string
        blocks: {}
      required:
        - text
        - blocks
    SlackOverride:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/SlackMessage'
      required:
        - message
      allOf:
        - $ref: '#/components/schemas/ChannelOverride'
    InAppOverride:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/ChannelOverride'
    TelegramOverride:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/ChannelOverride'
    Param:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      required:
        - name
        - value
    ProviderOverride:
      type: object
      properties:
        payload:
          type: object
          additionalProperties: {}
        form_params:
          type: array
          items:
            $ref: '#/components/schemas/Param'
        query_params:
          type: array
          items:
            $ref: '#/components/schemas/Param'
        path_params:
          type: array
          items:
            $ref: '#/components/schemas/Param'
        headers:
          type: array
          items:
            $ref: '#/components/schemas/Param'
      required:
        - payload
        - form_params
        - query_params
        - path_params
        - headers
    SendEventResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RequestId'
        success:
          type: boolean
          example: true
      required:
        - id
        - success
    BatchEvent:
      type: object
      properties:
        data:
          type: object
          additionalProperties: {}
          description: |
            {
            "param1" : "<value1>",
            "param2" : "<value2>",
            "param3" : object/array"
            }
        user:
          $ref: '#/components/schemas/User'
        override:
          $ref: '#/components/schemas/EventOverride'
      required:
        - data
    EventNotFoundErrorBody:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: string
      required:
        - success
        - error
    Device:
      type: object
      properties:
        id:
          type: string
        platform:
          $ref: '#/components/schemas/Platform'
        onesignal_player_id:
          type: string
        xiaomi_token:
          type: string
        oppo_token:
          type: string
        vivo_token:
          type: string
        huaweiToken:
          type: string
        fcm_token:
          type: string
          description: firebase device token
        raven_id:
          type: string
          description: user id affiliated with device
        device_sid:
          $ref: '#/components/schemas/DeviceId'
        notifications_disabled:
          type: boolean
        created_at:
          type: integer
          format: int64
        updated_at:
          type: integer
          format: int64
    Platform:
      type: string
      enum:
        - android
        - web
        - ios
    AppId:
      type: string
    UserId:
      type: string
    RequestId:
      type: string
    DeviceId:
      type: string
    RavenUser:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/UserId'
          description: >
            Your user identifier. 

            If user_id already exists, user properties will be updated else a
            new user will be created
        user_sid:
          type: string
        onesignal_external_id:
          type: string
        mobile:
          type: string
        email:
          type: string
        whatsapp_mobile:
          type: string
          description: >-
            Include this only when user's whatsapp mobile is different than
            primary mobile
        slack:
          $ref: '#/components/schemas/SlackProfile'
        telegram:
          $ref: '#/components/schemas/TelegramProfile'
        fcm_tokens:
          type: array
          items:
            type: string
        onesignal_player_ids:
          type: array
          items:
            type: string
        ios_tokens:
          type: array
          items:
            type: string
        created_at:
          type: integer
          format: int64
        updated_at:
          type: integer
          format: int64
      required:
        - user_id
    SlackProfile:
      type: object
      properties:
        access_token:
          type: string
        email:
          type: string
        channel_id:
          type: string
      required:
        - access_token
    TelegramProfile:
      type: object
      properties:
        chat_id:
          type: string
      required:
        - chat_id
    UserPreferences:
      type: object
      properties:
        preferred_channel:
          $ref: '#/components/schemas/Channel'
        channel_preferences:
          $ref: '#/components/schemas/ChannelPreferences'
    Channel:
      type: string
      enum:
        - VOICE
        - PUSH
        - SMS
        - EMAIL
        - WHATSAPP
        - WEBHOOK
        - SLACK
        - IN_APP
        - TELEGRAM
    ChannelPreferences:
      type: object
      properties:
        sms:
          $ref: '#/components/schemas/ChannelPreference'
        push:
          $ref: '#/components/schemas/ChannelPreference'
        whatsapp:
          $ref: '#/components/schemas/ChannelPreference'
        email:
          $ref: '#/components/schemas/ChannelPreference'
        slack:
          $ref: '#/components/schemas/ChannelPreference'
        voice:
          $ref: '#/components/schemas/ChannelPreference'
        teams:
          $ref: '#/components/schemas/ChannelPreference'
    ChannelPreference:
      type: object
      properties:
        disabled:
          type: boolean
      required:
        - disabled
  securitySchemes:
    AuthKeyAuth:
      type: apiKey
      in: header
      name: Authorization
servers:
  - url: https://api.ravenapp.dev
    description: Prod
